---
// src/components/SpeakerCard.astro (o donde esté tu componente)
// Las props de Astro están correctas

interface Props {
  nombre: string;
  tema: string;
  universidad: string;
  foto: string;
  biografia: string;
}

const { nombre, universidad, tema, foto, biografia } = Astro.props;

// Usaremos un ID único basado en el nombre para evitar conflictos si hay varias tarjetas
const dialogId = `dialog-${nombre.replace(/\s/g, '-')}`;
---

<div
  class="bg-white/80 w-72 dark:bg-gray-900/80 backdrop-blur-md to-white text-center text-white rounded-2xl shadow-lg overflow-hidden
        transition-transform duration-300 cursor-pointer 
        group shadow-purple-500/20 hover:shadow-2xl hover:shadow-purple-500/50
        border border-purple-700 "
>
  {/* Bandera y universidad */}
  <div class="flex justify-between items-center p-2">
    <span class="text-xs bg-purple-400 px-2 py-1 rounded-md ml-auto text-white">
      {universidad}
    </span>
  </div>

  {/* Contenedor de la foto con ilusión de acercamiento */}
  <div class="relative overflow-hidden">
    <img
      src={foto}
      alt={nombre}
      class="object-cover w-full 
            transition-transform duration-500 ease-in-out group-hover:scale-110"
    />
  </div>

  {/* Información del ponente */}
  <div class="p-4">
    <h3 class="font-semibold text-lg mb-2 text-purple-600 dark:text-purple-400">
      {nombre}
    </h3>
    <p class="text-xs text-gray-900 font-semibold dark:text-white leading-snug h-12 overflow-hidden">
      {tema}
    </p>

    <button
      id={`btn-${dialogId}`}
      class="mt-4 w-full bg-transparent border border-purple-500 text-purple-600 dark:text-purple-400 text-xs font-semibold py-2 rounded-lg 
            hover:bg-purple-600 hover:text-white transition-colors duration-300 "
    >
      VER BIOGRAFÍA
    </button>
  </div>
</div>

<dialog 
  id={dialogId}
  class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 rounded-2xl max-h-[90vh] p-0 border-0" 
  aria-label={`Biografía de ${nombre}`}
>
  <div class="bg-white/95 dark:bg-gray-900/95 text-left text-black dark:text-white w-[min(90vw,600px)]">
    <div class="flex justify-between items-start p-4 border-b border-gray-200 dark:border-gray-800">
      <div>
        <h3 class="text-lg font-semibold text-purple-600 dark:text-purple-400">{nombre}</h3>
        
      </div>
      <button data-close class="close-bio text-sm text-gray-600 dark:text-gray-300 hover:text-red-500" aria-label="Cerrar biografía">✕</button>
    </div>

    <div class="p-4 text-sm leading-relaxed overflow-y-auto max-h-[calc(90vh-140px)]">
      <p>{biografia}</p>
    </div>

    <div class="p-4 border-t border-gray-200 dark:border-gray-800 text-right">
      <button data-close class="inline-block px-4 py-2 bg-purple-600 text-white rounded-md text-sm hover:bg-purple-700">Cerrar</button>
    </div>
  </div>
</dialog>

<script define:vars={{ dialogId: dialogId }}>
  // Usamos 'define:vars' para pasar la ID única de Astro a JavaScript
  
  const dialogElement = document.getElementById(dialogId);
  const openButton = document.getElementById(`btn-${dialogId}`);
  
  if (dialogElement && openButton) {
    // 1. ABRIR DIÁLOGO
    openButton.addEventListener('click', () => {
      // Usamos showModal() para un diálogo que bloquea el fondo
      dialogElement.showModal();
    });

    // 2. CERRAR DIÁLOGO por clic en botones
    // Usamos 'querySelectorAll' para seleccionar todos los botones con el atributo data-close
    const closeButtons = dialogElement.querySelectorAll('[data-close]');
    
    closeButtons.forEach(button => {
      button.addEventListener('click', () => {
        dialogElement.close();
      });
    });

    // 3. CERRAR DIÁLOGO por clic fuera del contenido (click en el backdrop)
    // El evento 'click' en el diálogo se dispara antes que en sus hijos
    dialogElement.addEventListener('click', (event) => {
      // Verifica si el clic fue directamente sobre el <dialog> (el fondo/backdrop)
      if (event.target === dialogElement) {
        dialogElement.close();
      }
    });

  }
</script>